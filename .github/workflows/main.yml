name: Flutter Build (iOS and Android)

on:
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          cache: true

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Install certificate and provisioning file
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$IOS_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # Create a temporary keychain
          security create-keychain -p "" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$IOS_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Create export options
        env:
          IOS_TEAM_ID: ${{ secrets.IOS_TEAM_ID }}
          IOS_PROVISIONING_PROFILE_NAME: ${{ secrets.IOS_PROVISIONING_PROFILE_NAME }}
          IOS_BUNDLE_IDENTIFIER: ${{ secrets.IOS_BUNDLE_IDENTIFIER }}
        run: |
          cat <<EOF > ios/Runner/ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" 
          "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>ad-hoc</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${IOS_BUNDLE_IDENTIFIER}</key>
              <string>${IOS_PROVISIONING_PROFILE_NAME}</string>
            </dict>
            <key>signingStyle</key>
            <string>manual</string>
            <key>teamID</key>
            <string>${IOS_TEAM_ID}</string>
          </dict>
          </plist>
          EOF

      - name: Build IPA
        env:
          BUILD_NUMBER: ${{ github.run_number }}
        run: |
          flutter build ipa --release --export-options-plist=./ios/Runner/ExportOptions.plist --build-number=$BUILD_NUMBER

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa/*.ipa

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  build-android:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.3'
        cache: true

    - name: Install Flutter dependencies
      run: flutter pub get

    - name: Build Android APK
      env:
        BUILD_NUMBER: ${{ github.run_number }}
      run: flutter build apk --release --build-number=$BUILD_NUMBER

    - name: Upload Adnroid APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-apk
        path: build/app/outputs/flutter-apk/app-release.apk

    # To upload AAB to Firebase, a Google Play account needs to be linked to the Firebase account
    #- name: Build Android AAB
    #  run: flutter build appbundle --release

    #- name: Upload Android AAB artifact
    #  uses: actions/upload-artifact@v4
    #  with:
    #    name: release-aab
    #    path: build/app/outputs/bundle/release/app-release.aab

  release-ipa:
    name: Release IPA to Firebase
    needs: [ build-ios ]
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@v3
    - name: Get release-ipa from artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-ipa

    - name: Upload artifact to Firebase App Distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{ secrets.FIREBASE_IOS_APP_ID }}
        serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
        groups: tester-group-ios
        file: app.ipa

  release-android:
    name: Release AAB/APK to Firebase
    needs: [ build-android ]
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@v3
    - name: Get release-ipa from artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-apk # OR release-aab

    - name: Upload artifact to Firebase App Distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
        serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
        groups: tester-group-android
        file: app-release.apk

  
